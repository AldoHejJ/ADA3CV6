#include <stdio.h>
#include <stdlib.h>
#include <time.h>

// Función para comparar dos elementos (usada en qsort)
int compare(const void *a, const void *b) {
    return (*(int*)a - *(int*)b);
}

// Función para encontrar la mediana de un arreglo fusionado
double findMedianSortedArrays(int* nums1, int m, int* nums2, int n) {
    int* merged = (int*)malloc((m + n) * sizeof(int));
    
    // Fusionar los dos arreglos
    int i = 0, j = 0, k = 0;
    while (i < m && j < n) {
        if (nums1[i] < nums2[j]) {
            merged[k++] = nums1[i++];
        } else {
            merged[k++] = nums2[j++];
        }
    }
    while (i < m) {
        merged[k++] = nums1[i++];
    }
    while (j < n) {
        merged[k++] = nums2[j++];
    }

    // Calcular la mediana
    double median;
    if ((m + n) % 2 == 0) {
        median = (merged[(m + n) / 2 - 1] + merged[(m + n) / 2]) / 2.0;
    } else {
        median = merged[(m + n) / 2];
    }

    free(merged); // Liberar la memoria
    return median;
}

// Función para ordenar un arreglo si no está ordenado
void sortArray(int* nums, int size) {
    qsort(nums, size, sizeof(int), compare);
}

// Función para imprimir un arreglo
void printArray(int* nums, int size) {
    printf("[");
    for (int i = 0; i < size; i++) {
        printf("%d", nums[i]);
        if (i < size - 1) {
            printf(", ");
        }
    }
    printf("]\n");
}

int main() {
    // Ejemplo de arreglos
    int nums1[] = {1, 3};
    int nums2[] = {2};
    int m = sizeof(nums1) / sizeof(nums1[0]);
    int n = sizeof(nums2) / sizeof(nums2[0]);

    // Medir el tiempo de ejecución
    clock_t start = clock();

    // Ordenar los arreglos antes de fusionarlos
    sortArray(nums1, m);
    sortArray(nums2, n);

    // Imprimir arreglos
    printf("Arreglo 1: ");
    printArray(nums1, m);
    printf("Arreglo 2: ");
    printArray(nums2, n);

    // Encontrar y mostrar la mediana
    double median = findMedianSortedArrays(nums1, m, nums2, n);
    printf("La mediana es: %.5f\n", median);

    // Calcular tiempo total de ejecución
    clock_t end = clock();
    double time_taken = ((double)(end - start)) / CLOCKS_PER_SEC;
    printf("Tiempo total de ejecución: %.6f segundos\n", time_taken);

    return 0;
}
