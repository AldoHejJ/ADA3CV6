#include <stdio.h>
#include <stdlib.h>

int** generatePascalTriangle(int numRows, int* returnSize) {
    // Reserva memoria para un puntero a punteros que representará las filas del triángulo
    int** triangle = (int**)malloc(numRows * sizeof(int*));
    *returnSize = numRows;

    for (int i = 0; i < numRows; i++) {
        // Reserva memoria para cada fila (tamaño i+1)
        triangle[i] = (int*)malloc((i + 1) * sizeof(int));
        // Los extremos de cada fila son siempre 1
        triangle[i][0] = 1;
        triangle[i][i] = 1;

        // Rellena los valores intermedios
        for (int j = 1; j < i; j++) {
            triangle[i][j] = triangle[i - 1][j - 1] + triangle[i - 1][j];
        }
    }
    return triangle;
}

void printPascalTriangle(int** triangle, int numRows) {
    for (int i = 0; i < numRows; i++) {
        for (int j = 0; j <= i; j++) {
            printf("%d ", triangle[i][j]);
        }
        printf("\n");
    }
}

void freePascalTriangle(int** triangle, int numRows) {
    for (int i = 0; i < numRows; i++) {
        free(triangle[i]);
    }
    free(triangle);
}

int main() {
    int numRows;
    printf("Introduce el número de filas del triángulo de Pascal (1-30): ");
    scanf("%d", &numRows);

    if (numRows < 1 || numRows > 30) {
        printf("El número de filas debe estar entre 1 y 30.\n");
        return 1;
    }

    int returnSize;
    int** pascalTriangle = generatePascalTriangle(numRows, &returnSize);

    printf("Triángulo de Pascal:\n");
    printPascalTriangle(pascalTriangle, returnSize);

    freePascalTriangle(pascalTriangle, returnSize);

    return 0;
}
