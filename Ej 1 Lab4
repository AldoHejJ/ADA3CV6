#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <time.h>

typedef struct {
    double x;
    double y;
} Punto;

// Función para generar un número aleatorio en un rango
double generar_aleatorio(double min, double max) {
    return min + (rand() / (RAND_MAX / (max - min)));
}

// Función para calcular la distancia euclidiana entre dos puntos
double distancia(Punto p1, Punto p2) {
    return sqrt((p1.x - p2.x) * (p1.x - p2.x) + (p1.y - p2.y) * (p1.y - p2.y));
}

// Función para encontrar el par de puntos más cercanos
void encontrar_punto_mas_cercano(Punto* puntos, int n, Punto* par_mas_cercano, double* menor_distancia) {
    *menor_distancia = INFINITY;

    for (int i = 0; i < n; i++) {
        for (int j = i + 1; j < n; j++) {
            double d = distancia(puntos[i], puntos[j]);
            if (d < *menor_distancia) {
                *menor_distancia = d;
                par_mas_cercano[0] = puntos[i];
                par_mas_cercano[1] = puntos[j];
            }
        }
    }
}

// Función para medir el tiempo de ejecución
void medir_tiempos(int n) {
    Punto* puntos = (Punto*)malloc(n * sizeof(Punto));
    Punto par_mas_cercano[2];
    double menor_distancia;

    // Generar puntos aleatorios
    for (int i = 0; i < n; i++) {
        puntos[i].x = generar_aleatorio(-10.0, 10.0);
        puntos[i].y = generar_aleatorio(-10.0, 10.0);
    }

    clock_t inicio = clock();
    encontrar_punto_mas_cercano(puntos, n, par_mas_cercano, &menor_distancia);
    clock_t fin = clock();

    double tiempo_ejecucion = (double)(fin - inicio) / CLOCKS_PER_SEC;
    printf("n=%d: Tiempo de ejecución: %.6f segundos\n", n, tiempo_ejecucion);
    printf("Par más cercano: (%.2f, %.2f) y (%.2f, %.2f) con distancia: %.6f\n",
           par_mas_cercano[0].x, par_mas_cercano[0].y,
           par_mas_cercano[1].x, par_mas_cercano[1].y,
           menor_distancia);

    free(puntos);
}

int main() {
    srand(time(NULL));  // Inicializar la semilla para números aleatorios

    // Ejecutar pruebas para diferentes valores de n
    for (int n = 10; n <= 100000; n *= 10) {
        medir_tiempos(n);
    }

    return 0;
}
